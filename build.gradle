import static org.gradle.api.JavaVersion.VERSION_1_8


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "io.quarkus:quarkus-gradle-plugin:${quarkusPluginVersion}"
    }
}


plugins {
    id 'java'
    id 'io.quarkus' version "${quarkusPluginVersion}"
    id 'idea'
    id 'maven-publish'
    id 'distribution'

    id "net.ltgt.apt" version "0.21"
    id 'io.franzbecker.gradle-lombok' version '3.0.0'
    id 'org.hidetake.swagger.generator' version '2.18.1'

    id "org.sonarqube" version "2.7"
    id "com.jfrog.artifactory" version "4.12.0"
    id "com.github.ben-manes.versions" version "0.21.0"
}

version = defineVersion()

ext {
    sourceCompatibility = VERSION_1_8
    targetCompatibility = VERSION_1_8
    awsSdkVersion = '2.7.21'
    log4jVersion = '2.11.1'
    lombokVersion = '1.18.8'
    junitVersion = '5.3.2'
    mockitoVersion = "2.27.0"
    okhttpVersion = "3.14.1"
}

apply from: file('gradle/check.gradle')
apply from: file('gradle/sonar.gradle')
apply from: file('gradle/integration.gradle')
apply from: file('gradle/artifactory.gradle')

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    all*.exclude group: 'javax.inject', module: 'javax.inject'
}

dependencies {
    annotationProcessor group: "org.projectlombok", name: "lombok", version: "${lombokVersion}"
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.0.9'

    implementation enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}")
    implementation 'io.quarkus:quarkus-amazon-lambda'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation "io.quarkus:quarkus-amazon-lambda-deployment:${quarkusVersion}"

    implementation group: "com.amazonaws", name: "aws-java-sdk-rdsdata", version: "1.11.666"

    implementation group: 'software.amazon.awssdk', name: 'core', version: "${awsSdkVersion}"
    implementation 'commons-logging:commons-logging:1.2'
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: "1.7.25"

    implementation group: "com.google.code.gson", name: "gson", version: "2.8.2"
    implementation group: "com.squareup.okhttp3", name: "okhttp", version: "${okhttpVersion}"

    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "5.3.2"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "5.3.2"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "3.11.1"
}

lombok {
    version = "${lombokVersion}"
    sha256 = "c5178b18caaa1a15e17b99ba5e4023d2de2ebc18b58cde0f5a04ca4b31c10e6d"
}

swaggerSources {
    russianlabelReporting {
        inputFile = file('src/main/resources/swagger/swagger.yaml')
        code {
            language = 'java'
            configFile = file('src/main/resources/swagger/config.json')
            components = ['models']
        }
    }
}

buildNative {
    enableHttpUrlHandler = true
    enableHttpsUrlHandler = true
    enableJni = true
    addAllCharsets = true
    additionalBuildArgs = [
            '-H:ReflectionConfigurationFiles=reflection-config.json',
            '-H:ResourceConfigurationFiles=resources-config.json',
            '-H:DynamicProxyConfigurationFiles=dynamic-proxies.json',
            '-H:IncludeResources=com/amazonaws/partitions/endpoints.json',
            '--allow-incomplete-classpath',
            '--report-unsupported-elements-at-runtime'
    ]
}

wrapper {
    gradleVersion = '6.0.1'
    distributionType = Wrapper.DistributionType.ALL
}

def defineVersion() {
    def baseVersion = "${version}"
    def branchName = System.getenv('BRANCH_NAME') ?: 'local'
    branchName = branchName.replaceAll("/", "_")

    if ('master' == branchName) {
        def buildNumber = System.getenv('BUILD_NUMBER') ?: 0
        version = baseVersion + "-" + buildNumber
    } else {
        version = branchName + "-SNAPSHOT"
    }
    project.logger.lifecycle("Determined version: " + version)
    return version
}

